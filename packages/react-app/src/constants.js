// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum
export const INFURA_ID = process.env.REACT_APP_INFURA_KEY ?? "460f40a260564ac4a4f4b3fffb032dad";
// My Alchemy Key, swap in yours from https://dashboard.alchemyapi.io/
export const ALCHEMY_KEY = process.env.REACT_APP_ALCHEMY_KEY ?? "oKxs-03sij-U_N0iOlrSsZFr29-IqbuF";

// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey
export const ETHERSCAN_KEY = process.env.REACT_APP_ETHERSCAN_API_KEY ?? "DNXJA8RX2Q3VZ4URQIWP7Z68CJXQZSC6AW";

// BLOCKNATIVE ID FOR Notify.js:
export const BLOCKNATIVE_DAPPID = process.env.REACT_APP_BLOCKNATIVE_DAPP_ID ?? "0b58206a-f3c0-4701-a62f-73c7243e8c77";

// Docker Hardhat Host
export const HARDHAT_HOST = process.env.REACT_APP_HARDHAT_HOST ?? "http://localhost";

/*
Decrease the number of RPC calls by passing this value to hooks
with pollTime (useContractReader, useBalance, etc.).
Set it to 0 to disable it and make RPC calls "onBlock".
Note: this is not used when you are in the local hardhat chain.
*/
export const RPC_POLL_TIME = 30000;

const localRpcUrl = process.env.REACT_APP_CODESPACES
  ? `https://${window.location.hostname.replace("3000", "8545")}`
  : "http://" + (global.window ? window.location.hostname : "localhost") + ":8545";

export const NETWORKS = {
  localhost: {
    name: "localhost",
    color: "#666666",
    chainId: 31337,
    blockExplorer: "",
    rpcUrl: localRpcUrl,
  },
  mainnet: {
    name: "mainnet",
    color: "#ff8b9e",
    chainId: 1,
    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,
    blockExplorer: "https://etherscan.io/",
  },
  goerli: {
    name: "goerli",
    color: "#0975F6",
    chainId: 5,
    faucet: "https://goerli-faucet.slock.it/",
    blockExplorer: "https://goerli.etherscan.io/",
    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,
  },
  xdai: {
    name: "xdai",
    color: "#48a9a6",
    chainId: 100,
    price: 1,
    gasPrice: 1000000000,
    rpcUrl: "https://dai.poa.network",
    faucet: "https://xdai-faucet.top/",
    blockExplorer: "https://blockscout.com/poa/xdai/",
  },
  polygon: {
    name: "polygon",
    color: "#2bbdf7",
    chainId: 137,
    price: 1,
    gasPrice: 1000000000,
    rpcUrl: "https://polygon-rpc.com/",
    blockExplorer: "https://polygonscan.com/",
  },
  mumbai: {
    name: "mumbai",
    color: "#92D9FA",
    chainId: 80001,
    price: 1,
    gasPrice: 1000000000,
    rpcUrl: "https://rpc-mumbai.maticvigil.com",
    faucet: "https://faucet.matic.network/",
    blockExplorer: "https://mumbai-explorer.matic.today/",
  },
  localOptimismL1: {
    name: "localOptimismL1",
    color: "#f01a37",
    chainId: 31337,
    blockExplorer: "",
    rpcUrl: "http://" + (global.window ? window.location.hostname : "localhost") + ":9545",
  },
  localOptimism: {
    name: "localOptimism",
    color: "#f01a37",
    chainId: 420,
    blockExplorer: "",
    rpcUrl: "http://" + (global.window ? window.location.hostname : "localhost") + ":8545",
    gasPrice: 0,
  },
  goerliOptimism: {
    name: "goerliOptimism",
    color: "#f01a37",
    chainId: 420,
    blockExplorer: "https://optimism.io",
    rpcUrl: `https://goerli.optimism.io/`,
    gasPrice: 0,
  },
  optimism: {
    name: "optimism",
    color: "#f01a37",
    chainId: 10,
    blockExplorer: "https://optimistic.etherscan.io/",
    rpcUrl: `https://mainnet.optimism.io`,
  },
  goerliArbitrum: {
    name: "goerliArbitrum",
    color: "#28a0f0",
    chainId: 421613,
    blockExplorer: "https://goerli-rollup-explorer.arbitrum.io",
    rpcUrl: "https://goerli-rollup.arbitrum.io/rpc/",
  },
  arbitrum: {
    name: "arbitrum",
    color: "#28a0f0",
    chainId: 42161,
    blockExplorer: "https://arbiscan.io/",
    rpcUrl: "https://arb1.arbitrum.io/rpc",
  },
  devnetArbitrum: {
    name: "devnetArbitrum",
    color: "#28a0f0",
    chainId: 421612,
    blockExplorer: "https://nitro-devnet-explorer.arbitrum.io/",
    rpcUrl: "https://nitro-devnet.arbitrum.io/rpc",
  },
  localAvalanche: {
    name: "localAvalanche",
    color: "#666666",
    chainId: 43112,
    blockExplorer: "",
    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,
    gasPrice: 225000000000,
  },
  fujiAvalanche: {
    name: "fujiAvalanche",
    color: "#666666",
    chainId: 43113,
    blockExplorer: "https://cchain.explorer.avax-test.network/",
    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,
    gasPrice: 225000000000,
  },
  mainnetAvalanche: {
    name: "mainnetAvalanche",
    color: "#666666",
    chainId: 43114,
    blockExplorer: "https://cchain.explorer.avax.network/",
    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,
    gasPrice: 225000000000,
  },
  testnetHarmony: {
    name: "testnetHarmony",
    color: "#00b0ef",
    chainId: 1666700000,
    blockExplorer: "https://explorer.pops.one/",
    rpcUrl: `https://api.s0.b.hmny.io`,
    gasPrice: 1000000000,
  },
  mainnetHarmony: {
    name: "mainnetHarmony",
    color: "#00b0ef",
    chainId: 1666600000,
    blockExplorer: "https://explorer.harmony.one/",
    rpcUrl: `https://api.harmony.one`,
    gasPrice: 1000000000,
  },
  fantom: {
    name: "fantom",
    color: "#1969ff",
    chainId: 250,
    blockExplorer: "https://ftmscan.com/",
    rpcUrl: `https://rpcapi.fantom.network`,
    gasPrice: 1000000000,
  },
  testnetFantom: {
    name: "testnetFantom",
    color: "#1969ff",
    chainId: 4002,
    blockExplorer: "https://testnet.ftmscan.com/",
    rpcUrl: `https://rpc.testnet.fantom.network`,
    gasPrice: 1000000000,
    faucet: "https://faucet.fantom.network/",
  },
  moonbeam: {
    name: "moonbeam",
    color: "#53CBC9",
    chainId: 1284,
    blockExplorer: "https://moonscan.io",
    rpcUrl: "https://rpc.api.moonbeam.network",
  },
  moonriver: {
    name: "moonriver",
    color: "#53CBC9",
    chainId: 1285,
    blockExplorer: "https://moonriver.moonscan.io/",
    rpcUrl: "https://rpc.api.moonriver.moonbeam.network",
  },
  moonbaseAlpha: {
    name: "moonbaseAlpha",
    color: "#53CBC9",
    chainId: 1287,
    blockExplorer: "https://moonbase.moonscan.io/",
    rpcUrl: "https://rpc.api.moonbase.moonbeam.network",
    faucet: "https://discord.gg/SZNP8bWHZq",
  },
  moonbeamDevNode: {
    name: "moonbeamDevNode",
    color: "#53CBC9",
    chainId: 1281,
    blockExplorer: "https://moonbeam-explorer.netlify.app/",
    rpcUrl: "http://127.0.0.1:9933",
  },
};

export const NETWORK = chainId => {
  for (const n in NETWORKS) {
    if (NETWORKS[n].chainId === chainId) {
      return NETWORKS[n];
    }
  }
};

//Lens ABI - courtesty of
export const MOCK_PROFILE_CREATOR_PROXY = "0x420f0257D43145bb002E69B14FF2Eb9630Fc4736";
export const LENS_HUB = "0x60Ae865ee4C725cd04353b5AAb364553f56ceF82";
export const HUB = [
  {
    inputs: [
      { internalType: "address", name: "_logic", type: "address" },
      { internalType: "address", name: "admin_", type: "address" },
      { internalType: "bytes", name: "_data", type: "bytes" },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: "address", name: "previousAdmin", type: "address" },
      { indexed: false, internalType: "address", name: "newAdmin", type: "address" },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, internalType: "address", name: "beacon", type: "address" }],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, internalType: "address", name: "implementation", type: "address" }],
    name: "Upgraded",
    type: "event",
  },
  { stateMutability: "payable", type: "fallback" },
  {
    inputs: [],
    name: "admin",
    outputs: [{ internalType: "address", name: "admin_", type: "address" }],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "newAdmin", type: "address" }],
    name: "changeAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [{ internalType: "address", name: "implementation_", type: "address" }],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "newImplementation", type: "address" }],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "newImplementation", type: "address" },
      { internalType: "bytes", name: "data", type: "bytes" },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  { stateMutability: "payable", type: "receive" },
];
export const PROXY = [
  {
    inputs: [{ internalType: "contract ILensHub", name: "hub", type: "address" }],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  { inputs: [], name: "HandleContainsInvalidCharacters", type: "error" },
  { inputs: [], name: "HandleFirstCharInvalid", type: "error" },
  { inputs: [], name: "HandleLengthInvalid", type: "error" },
  {
    inputs: [
      {
        components: [
          { internalType: "address", name: "to", type: "address" },
          { internalType: "string", name: "handle", type: "string" },
          { internalType: "string", name: "imageURI", type: "string" },
          { internalType: "address", name: "followModule", type: "address" },
          { internalType: "bytes", name: "followModuleInitData", type: "bytes" },
          { internalType: "string", name: "followNFTURI", type: "string" },
        ],
        internalType: "struct DataTypes.CreateProfileData",
        name: "vars",
        type: "tuple",
      },
    ],
    name: "proxyCreateProfile",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];
export const LENS_ABI = {
  name: "Exploring Lens Protocol",
  children: [
    {
      name: "MockProfileCreatorProxy",
      children: [
        {
          lock: false,
          address: "{{MOCK_PROFILE_CREATOR_PROXY}}",
          name: "proxyCreateProfile",
          abi: {
            inputs: [
              {
                components: [
                  { internalType: "address", name: "to", type: "address" },
                  { internalType: "string", name: "handle", type: "string" },
                  { internalType: "string", name: "imageURI", type: "string" },
                  { internalType: "address", name: "followModule", type: "address" },
                  { internalType: "bytes", name: "followModuleInitData", type: "bytes" },
                  { internalType: "string", name: "followNFTURI", type: "string" },
                ],
                internalType: "struct DataTypes.CreateProfileData",
                name: "vars",
                type: "tuple",
              },
            ],
            name: "proxyCreateProfile",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },

          params: [[]],
        },
      ],
      lock: false,
    },
    {
      name: "LensHub",
      children: [
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "whitelistReferenceModule",
          abi: {
            inputs: [
              { internalType: "address", name: "referenceModule", type: "address" },
              { internalType: "bool", name: "whitelist", type: "bool" },
            ],
            name: "whitelistReferenceModule",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "whitelistProfileCreator",
          abi: {
            inputs: [
              { internalType: "address", name: "profileCreator", type: "address" },
              { internalType: "bool", name: "whitelist", type: "bool" },
            ],
            name: "whitelistProfileCreator",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "whitelistFollowModule",
          abi: {
            inputs: [
              { internalType: "address", name: "followModule", type: "address" },
              { internalType: "bool", name: "whitelist", type: "bool" },
            ],
            name: "whitelistFollowModule",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "whitelistCollectModule",
          abi: {
            inputs: [
              { internalType: "address", name: "collectModule", type: "address" },
              { internalType: "bool", name: "whitelist", type: "bool" },
            ],
            name: "whitelistCollectModule",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "transferFrom",
          abi: {
            inputs: [
              { internalType: "address", name: "from", type: "address" },
              { internalType: "address", name: "to", type: "address" },
              { internalType: "uint256", name: "tokenId", type: "uint256" },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", "", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "totalSupply",
          abi: {
            inputs: [],
            name: "totalSupply",
            outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
            stateMutability: "view",
            type: "function",
          },
          params: [],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "tokenURI",
          abi: {
            inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }],
            name: "tokenURI",
            outputs: [{ internalType: "string", name: "", type: "string" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "tokenOfOwnerByIndex",
          abi: {
            inputs: [
              { internalType: "address", name: "owner", type: "address" },
              { internalType: "uint256", name: "index", type: "uint256" },
            ],
            name: "tokenOfOwnerByIndex",
            outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
            stateMutability: "view",
            type: "function",
          },

          params: ["", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "tokenDataOf",
          abi: {
            inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }],
            name: "tokenDataOf",
            outputs: [
              {
                components: [
                  { internalType: "address", name: "owner", type: "address" },
                  { internalType: "uint96", name: "mintTimestamp", type: "uint96" },
                ],
                internalType: "struct IERC721Time.TokenData",
                name: "",
                type: "tuple",
              },
            ],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "tokenByIndex",
          abi: {
            inputs: [{ internalType: "uint256", name: "index", type: "uint256" }],
            name: "tokenByIndex",
            outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "symbol",
          abi: {
            inputs: [],
            name: "symbol",
            outputs: [{ internalType: "string", name: "", type: "string" }],
            stateMutability: "view",
            type: "function",
          },
          params: [],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "supportsInterface",
          abi: {
            inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }],
            name: "supportsInterface",
            outputs: [{ internalType: "bool", name: "", type: "bool" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "sigNonces",
          abi: {
            inputs: [{ internalType: "address", name: "", type: "address" }],
            name: "sigNonces",
            outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "setState",
          abi: {
            inputs: [{ internalType: "enum DataTypes.ProtocolState", name: "newState", type: "uint8" }],
            name: "setState",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "setProfileImageURIWithSig",
          abi: {
            inputs: [
              {
                components: [
                  { internalType: "uint256", name: "profileId", type: "uint256" },
                  { internalType: "string", name: "imageURI", type: "string" },
                  {
                    components: [
                      { internalType: "uint8", name: "v", type: "uint8" },
                      { internalType: "bytes32", name: "r", type: "bytes32" },
                      { internalType: "bytes32", name: "s", type: "bytes32" },
                      { internalType: "uint256", name: "deadline", type: "uint256" },
                    ],
                    internalType: "struct DataTypes.EIP712Signature",
                    name: "sig",
                    type: "tuple",
                  },
                ],
                internalType: "struct DataTypes.SetProfileImageURIWithSigData",
                name: "vars",
                type: "tuple",
              },
            ],
            name: "setProfileImageURIWithSig",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "setProfileImageURI",
          abi: {
            inputs: [
              { internalType: "uint256", name: "profileId", type: "uint256" },
              { internalType: "string", name: "imageURI", type: "string" },
            ],
            name: "setProfileImageURI",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "setGovernance",
          abi: {
            inputs: [{ internalType: "address", name: "newGovernance", type: "address" }],
            name: "setGovernance",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "setFollowNFTURIWithSig",
          abi: {
            inputs: [
              {
                components: [
                  { internalType: "uint256", name: "profileId", type: "uint256" },
                  { internalType: "string", name: "followNFTURI", type: "string" },
                  {
                    components: [
                      { internalType: "uint8", name: "v", type: "uint8" },
                      { internalType: "bytes32", name: "r", type: "bytes32" },
                      { internalType: "bytes32", name: "s", type: "bytes32" },
                      { internalType: "uint256", name: "deadline", type: "uint256" },
                    ],
                    internalType: "struct DataTypes.EIP712Signature",
                    name: "sig",
                    type: "tuple",
                  },
                ],
                internalType: "struct DataTypes.SetFollowNFTURIWithSigData",
                name: "vars",
                type: "tuple",
              },
            ],
            name: "setFollowNFTURIWithSig",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "setFollowNFTURI",
          abi: {
            inputs: [
              { internalType: "uint256", name: "profileId", type: "uint256" },
              { internalType: "string", name: "followNFTURI", type: "string" },
            ],
            name: "setFollowNFTURI",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "setFollowModuleWithSig",
          abi: {
            inputs: [
              {
                components: [
                  { internalType: "uint256", name: "profileId", type: "uint256" },
                  { internalType: "address", name: "followModule", type: "address" },
                  { internalType: "bytes", name: "followModuleInitData", type: "bytes" },
                  {
                    components: [
                      { internalType: "uint8", name: "v", type: "uint8" },
                      { internalType: "bytes32", name: "r", type: "bytes32" },
                      { internalType: "bytes32", name: "s", type: "bytes32" },
                      { internalType: "uint256", name: "deadline", type: "uint256" },
                    ],
                    internalType: "struct DataTypes.EIP712Signature",
                    name: "sig",
                    type: "tuple",
                  },
                ],
                internalType: "struct DataTypes.SetFollowModuleWithSigData",
                name: "vars",
                type: "tuple",
              },
            ],
            name: "setFollowModuleWithSig",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "setFollowModule",
          abi: {
            inputs: [
              { internalType: "uint256", name: "profileId", type: "uint256" },
              { internalType: "address", name: "followModule", type: "address" },
              { internalType: "bytes", name: "followModuleInitData", type: "bytes" },
            ],
            name: "setFollowModule",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", "", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "setEmergencyAdmin",
          abi: {
            inputs: [{ internalType: "address", name: "newEmergencyAdmin", type: "address" }],
            name: "setEmergencyAdmin",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "setDispatcherWithSig",
          abi: {
            inputs: [
              {
                components: [
                  { internalType: "uint256", name: "profileId", type: "uint256" },
                  { internalType: "address", name: "dispatcher", type: "address" },
                  {
                    components: [
                      { internalType: "uint8", name: "v", type: "uint8" },
                      { internalType: "bytes32", name: "r", type: "bytes32" },
                      { internalType: "bytes32", name: "s", type: "bytes32" },
                      { internalType: "uint256", name: "deadline", type: "uint256" },
                    ],
                    internalType: "struct DataTypes.EIP712Signature",
                    name: "sig",
                    type: "tuple",
                  },
                ],
                internalType: "struct DataTypes.SetDispatcherWithSigData",
                name: "vars",
                type: "tuple",
              },
            ],
            name: "setDispatcherWithSig",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "setDispatcher",
          abi: {
            inputs: [
              { internalType: "uint256", name: "profileId", type: "uint256" },
              { internalType: "address", name: "dispatcher", type: "address" },
            ],
            name: "setDispatcher",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "setDefaultProfileWithSig",
          abi: {
            inputs: [
              {
                components: [
                  { internalType: "address", name: "wallet", type: "address" },
                  { internalType: "uint256", name: "profileId", type: "uint256" },
                  {
                    components: [
                      { internalType: "uint8", name: "v", type: "uint8" },
                      { internalType: "bytes32", name: "r", type: "bytes32" },
                      { internalType: "bytes32", name: "s", type: "bytes32" },
                      { internalType: "uint256", name: "deadline", type: "uint256" },
                    ],
                    internalType: "struct DataTypes.EIP712Signature",
                    name: "sig",
                    type: "tuple",
                  },
                ],
                internalType: "struct DataTypes.SetDefaultProfileWithSigData",
                name: "vars",
                type: "tuple",
              },
            ],
            name: "setDefaultProfileWithSig",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "setDefaultProfile",
          abi: {
            inputs: [{ internalType: "uint256", name: "profileId", type: "uint256" }],
            name: "setDefaultProfile",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "setApprovalForAll",
          abi: {
            inputs: [
              { internalType: "address", name: "operator", type: "address" },
              { internalType: "bool", name: "approved", type: "bool" },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "safeTransferFrom",
          abi: {
            inputs: [
              { internalType: "address", name: "from", type: "address" },
              { internalType: "address", name: "to", type: "address" },
              { internalType: "uint256", name: "tokenId", type: "uint256" },
              { internalType: "bytes", name: "_data", type: "bytes" },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", "", "", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "safeTransferFrom",
          abi: {
            inputs: [
              { internalType: "address", name: "from", type: "address" },
              { internalType: "address", name: "to", type: "address" },
              { internalType: "uint256", name: "tokenId", type: "uint256" },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", "", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "postWithSig",
          abi: {
            inputs: [
              {
                components: [
                  { internalType: "uint256", name: "profileId", type: "uint256" },
                  { internalType: "string", name: "contentURI", type: "string" },
                  { internalType: "address", name: "collectModule", type: "address" },
                  { internalType: "bytes", name: "collectModuleInitData", type: "bytes" },
                  { internalType: "address", name: "referenceModule", type: "address" },
                  { internalType: "bytes", name: "referenceModuleInitData", type: "bytes" },
                  {
                    components: [
                      { internalType: "uint8", name: "v", type: "uint8" },
                      { internalType: "bytes32", name: "r", type: "bytes32" },
                      { internalType: "bytes32", name: "s", type: "bytes32" },
                      { internalType: "uint256", name: "deadline", type: "uint256" },
                    ],
                    internalType: "struct DataTypes.EIP712Signature",
                    name: "sig",
                    type: "tuple",
                  },
                ],
                internalType: "struct DataTypes.PostWithSigData",
                name: "vars",
                type: "tuple",
              },
            ],
            name: "postWithSig",
            outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "post",
          abi: {
            inputs: [
              {
                components: [
                  { internalType: "uint256", name: "profileId", type: "uint256" },
                  { internalType: "string", name: "contentURI", type: "string" },
                  { internalType: "address", name: "collectModule", type: "address" },
                  { internalType: "bytes", name: "collectModuleInitData", type: "bytes" },
                  { internalType: "address", name: "referenceModule", type: "address" },
                  { internalType: "bytes", name: "referenceModuleInitData", type: "bytes" },
                ],
                internalType: "struct DataTypes.PostData",
                name: "vars",
                type: "tuple",
              },
            ],
            name: "post",
            outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
            stateMutability: "nonpayable",
            type: "function",
          },

          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "permitForAll",
          abi: {
            inputs: [
              { internalType: "address", name: "owner", type: "address" },
              { internalType: "address", name: "operator", type: "address" },
              { internalType: "bool", name: "approved", type: "bool" },
              {
                components: [
                  { internalType: "uint8", name: "v", type: "uint8" },
                  { internalType: "bytes32", name: "r", type: "bytes32" },
                  { internalType: "bytes32", name: "s", type: "bytes32" },
                  { internalType: "uint256", name: "deadline", type: "uint256" },
                ],
                internalType: "struct DataTypes.EIP712Signature",
                name: "sig",
                type: "tuple",
              },
            ],
            name: "permitForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", "", "", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "permit",
          abi: {
            inputs: [
              { internalType: "address", name: "spender", type: "address" },
              { internalType: "uint256", name: "tokenId", type: "uint256" },
              {
                components: [
                  { internalType: "uint8", name: "v", type: "uint8" },
                  { internalType: "bytes32", name: "r", type: "bytes32" },
                  { internalType: "bytes32", name: "s", type: "bytes32" },
                  { internalType: "uint256", name: "deadline", type: "uint256" },
                ],
                internalType: "struct DataTypes.EIP712Signature",
                name: "sig",
                type: "tuple",
              },
            ],
            name: "permit",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", "", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "ownerOf",
          abi: {
            inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }],
            name: "ownerOf",
            outputs: [{ internalType: "address", name: "", type: "address" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "name",
          abi: {
            inputs: [],
            name: "name",
            outputs: [{ internalType: "string", name: "", type: "string" }],
            stateMutability: "view",
            type: "function",
          },
          params: [],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "mirrorWithSig",
          abi: {
            inputs: [
              {
                components: [
                  { internalType: "uint256", name: "profileId", type: "uint256" },
                  { internalType: "uint256", name: "profileIdPointed", type: "uint256" },
                  { internalType: "uint256", name: "pubIdPointed", type: "uint256" },
                  { internalType: "bytes", name: "referenceModuleData", type: "bytes" },
                  { internalType: "address", name: "referenceModule", type: "address" },
                  { internalType: "bytes", name: "referenceModuleInitData", type: "bytes" },
                  {
                    components: [
                      { internalType: "uint8", name: "v", type: "uint8" },
                      { internalType: "bytes32", name: "r", type: "bytes32" },
                      { internalType: "bytes32", name: "s", type: "bytes32" },
                      { internalType: "uint256", name: "deadline", type: "uint256" },
                    ],
                    internalType: "struct DataTypes.EIP712Signature",
                    name: "sig",
                    type: "tuple",
                  },
                ],
                internalType: "struct DataTypes.MirrorWithSigData",
                name: "vars",
                type: "tuple",
              },
            ],
            name: "mirrorWithSig",
            outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "mirror",
          abi: {
            inputs: [
              {
                components: [
                  { internalType: "uint256", name: "profileId", type: "uint256" },
                  { internalType: "uint256", name: "profileIdPointed", type: "uint256" },
                  { internalType: "uint256", name: "pubIdPointed", type: "uint256" },
                  { internalType: "bytes", name: "referenceModuleData", type: "bytes" },
                  { internalType: "address", name: "referenceModule", type: "address" },
                  { internalType: "bytes", name: "referenceModuleInitData", type: "bytes" },
                ],
                internalType: "struct DataTypes.MirrorData",
                name: "vars",
                type: "tuple",
              },
            ],
            name: "mirror",
            outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "mintTimestampOf",
          abi: {
            inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }],
            name: "mintTimestampOf",
            outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "isReferenceModuleWhitelisted",
          abi: {
            inputs: [{ internalType: "address", name: "referenceModule", type: "address" }],
            name: "isReferenceModuleWhitelisted",
            outputs: [{ internalType: "bool", name: "", type: "bool" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "isProfileCreatorWhitelisted",
          abi: {
            inputs: [{ internalType: "address", name: "profileCreator", type: "address" }],
            name: "isProfileCreatorWhitelisted",
            outputs: [{ internalType: "bool", name: "", type: "bool" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "isFollowModuleWhitelisted",
          abi: {
            inputs: [{ internalType: "address", name: "followModule", type: "address" }],
            name: "isFollowModuleWhitelisted",
            outputs: [{ internalType: "bool", name: "", type: "bool" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "isCollectModuleWhitelisted",
          abi: {
            inputs: [{ internalType: "address", name: "collectModule", type: "address" }],
            name: "isCollectModuleWhitelisted",
            outputs: [{ internalType: "bool", name: "", type: "bool" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "isApprovedForAll",
          abi: {
            inputs: [
              { internalType: "address", name: "owner", type: "address" },
              { internalType: "address", name: "operator", type: "address" },
            ],
            name: "isApprovedForAll",
            outputs: [{ internalType: "bool", name: "", type: "bool" }],
            stateMutability: "view",
            type: "function",
          },
          params: ["", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "initialize",
          abi: {
            inputs: [
              { internalType: "string", name: "name", type: "string" },
              { internalType: "string", name: "symbol", type: "string" },
              { internalType: "address", name: "newGovernance", type: "address" },
            ],
            name: "initialize",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", "", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getState",
          abi: {
            inputs: [],
            name: "getState",
            outputs: [{ internalType: "enum DataTypes.ProtocolState", name: "", type: "uint8" }],
            stateMutability: "view",
            type: "function",
          },
          params: [],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getReferenceModule",
          abi: {
            inputs: [
              { internalType: "uint256", name: "profileId", type: "uint256" },
              { internalType: "uint256", name: "pubId", type: "uint256" },
            ],
            name: "getReferenceModule",
            outputs: [{ internalType: "address", name: "", type: "address" }],
            stateMutability: "view",
            type: "function",
          },
          params: ["", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getPubType",
          abi: {
            inputs: [
              { internalType: "uint256", name: "profileId", type: "uint256" },
              { internalType: "uint256", name: "pubId", type: "uint256" },
            ],
            name: "getPubType",
            outputs: [{ internalType: "enum DataTypes.PubType", name: "", type: "uint8" }],
            stateMutability: "view",
            type: "function",
          },
          params: ["", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getPubPointer",
          abi: {
            inputs: [
              { internalType: "uint256", name: "profileId", type: "uint256" },
              { internalType: "uint256", name: "pubId", type: "uint256" },
            ],
            name: "getPubPointer",
            outputs: [
              { internalType: "uint256", name: "", type: "uint256" },
              { internalType: "uint256", name: "", type: "uint256" },
            ],
            stateMutability: "view",
            type: "function",
          },
          params: ["", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getPubCount",
          abi: {
            inputs: [{ internalType: "uint256", name: "profileId", type: "uint256" }],
            name: "getPubCount",
            outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getPub",
          abi: {
            inputs: [
              { internalType: "uint256", name: "profileId", type: "uint256" },
              { internalType: "uint256", name: "pubId", type: "uint256" },
            ],
            name: "getPub",
            outputs: [
              {
                components: [
                  { internalType: "uint256", name: "profileIdPointed", type: "uint256" },
                  { internalType: "uint256", name: "pubIdPointed", type: "uint256" },
                  { internalType: "string", name: "contentURI", type: "string" },
                  { internalType: "address", name: "referenceModule", type: "address" },
                  { internalType: "address", name: "collectModule", type: "address" },
                  { internalType: "address", name: "collectNFT", type: "address" },
                ],
                internalType: "struct DataTypes.PublicationStruct",
                name: "",
                type: "tuple",
              },
            ],
            stateMutability: "view",
            type: "function",
          },

          params: ["", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getProfileIdByHandle",
          abi: {
            inputs: [{ internalType: "string", name: "handle", type: "string" }],
            name: "getProfileIdByHandle",
            outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getProfile",
          abi: {
            inputs: [{ internalType: "uint256", name: "profileId", type: "uint256" }],
            name: "getProfile",
            outputs: [
              {
                components: [
                  { internalType: "uint256", name: "pubCount", type: "uint256" },
                  { internalType: "address", name: "followModule", type: "address" },
                  { internalType: "address", name: "followNFT", type: "address" },
                  { internalType: "string", name: "handle", type: "string" },
                  { internalType: "string", name: "imageURI", type: "string" },
                  { internalType: "string", name: "followNFTURI", type: "string" },
                ],
                internalType: "struct DataTypes.ProfileStruct",
                name: "",
                type: "tuple",
              },
            ],
            stateMutability: "view",
            type: "function",
          },

          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getHandle",
          abi: {
            inputs: [{ internalType: "uint256", name: "profileId", type: "uint256" }],
            name: "getHandle",
            outputs: [{ internalType: "string", name: "", type: "string" }],
            stateMutability: "view",
            type: "function",
          },

          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getGovernance",
          abi: {
            inputs: [],
            name: "getGovernance",
            outputs: [{ internalType: "address", name: "", type: "address" }],
            stateMutability: "view",
            type: "function",
          },
          params: [],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getFollowNFTURI",
          abi: {
            inputs: [{ internalType: "uint256", name: "profileId", type: "uint256" }],
            name: "getFollowNFTURI",
            outputs: [{ internalType: "string", name: "", type: "string" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getFollowNFTImpl",
          abi: {
            inputs: [],
            name: "getFollowNFTImpl",
            outputs: [{ internalType: "address", name: "", type: "address" }],
            stateMutability: "view",
            type: "function",
          },
          params: [],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getFollowNFT",
          abi: {
            inputs: [{ internalType: "uint256", name: "profileId", type: "uint256" }],
            name: "getFollowNFT",
            outputs: [{ internalType: "address", name: "", type: "address" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getFollowModule",
          abi: {
            inputs: [{ internalType: "uint256", name: "profileId", type: "uint256" }],
            name: "getFollowModule",
            outputs: [{ internalType: "address", name: "", type: "address" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getDomainSeparator",
          abi: {
            inputs: [],
            name: "getDomainSeparator",
            outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
            stateMutability: "view",
            type: "function",
          },
          params: [],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getDispatcher",
          abi: {
            inputs: [{ internalType: "uint256", name: "profileId", type: "uint256" }],
            name: "getDispatcher",
            outputs: [{ internalType: "address", name: "", type: "address" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getContentURI",
          abi: {
            inputs: [
              { internalType: "uint256", name: "profileId", type: "uint256" },
              { internalType: "uint256", name: "pubId", type: "uint256" },
            ],
            name: "getContentURI",
            outputs: [{ internalType: "string", name: "", type: "string" }],
            stateMutability: "view",
            type: "function",
          },
          params: ["", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getCollectNFTImpl",
          abi: {
            inputs: [],
            name: "getCollectNFTImpl",
            outputs: [{ internalType: "address", name: "", type: "address" }],
            stateMutability: "view",
            type: "function",
          },
          params: [],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getCollectNFT",
          abi: {
            inputs: [
              { internalType: "uint256", name: "profileId", type: "uint256" },
              { internalType: "uint256", name: "pubId", type: "uint256" },
            ],
            name: "getCollectNFT",
            outputs: [{ internalType: "address", name: "", type: "address" }],
            stateMutability: "view",
            type: "function",
          },
          params: ["", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getCollectModule",
          abi: {
            inputs: [
              { internalType: "uint256", name: "profileId", type: "uint256" },
              { internalType: "uint256", name: "pubId", type: "uint256" },
            ],
            name: "getCollectModule",
            outputs: [{ internalType: "address", name: "", type: "address" }],
            stateMutability: "view",
            type: "function",
          },
          params: ["", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "getApproved",
          abi: {
            inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }],
            name: "getApproved",
            outputs: [{ internalType: "address", name: "", type: "address" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "followWithSig",
          abi: {
            inputs: [
              {
                components: [
                  { internalType: "address", name: "follower", type: "address" },
                  { internalType: "uint256[]", name: "profileIds", type: "uint256[]" },
                  { internalType: "bytes[]", name: "datas", type: "bytes[]" },
                  {
                    components: [
                      { internalType: "uint8", name: "v", type: "uint8" },
                      { internalType: "bytes32", name: "r", type: "bytes32" },
                      { internalType: "bytes32", name: "s", type: "bytes32" },
                      { internalType: "uint256", name: "deadline", type: "uint256" },
                    ],
                    internalType: "struct DataTypes.EIP712Signature",
                    name: "sig",
                    type: "tuple",
                  },
                ],
                internalType: "struct DataTypes.FollowWithSigData",
                name: "vars",
                type: "tuple",
              },
            ],
            name: "followWithSig",
            outputs: [{ internalType: "uint256[]", name: "", type: "uint256[]" }],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "follow",
          abi: {
            inputs: [
              { internalType: "uint256[]", name: "profileIds", type: "uint256[]" },
              { internalType: "bytes[]", name: "datas", type: "bytes[]" },
            ],
            name: "follow",
            outputs: [{ internalType: "uint256[]", name: "", type: "uint256[]" }],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [[], []],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "exists",
          abi: {
            inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }],
            name: "exists",
            outputs: [{ internalType: "bool", name: "", type: "bool" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "emitFollowNFTTransferEvent",
          abi: {
            inputs: [
              { internalType: "uint256", name: "profileId", type: "uint256" },
              { internalType: "uint256", name: "followNFTId", type: "uint256" },
              { internalType: "address", name: "from", type: "address" },
              { internalType: "address", name: "to", type: "address" },
            ],
            name: "emitFollowNFTTransferEvent",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", "", "", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "emitCollectNFTTransferEvent",
          abi: {
            inputs: [
              { internalType: "uint256", name: "profileId", type: "uint256" },
              { internalType: "uint256", name: "pubId", type: "uint256" },
              { internalType: "uint256", name: "collectNFTId", type: "uint256" },
              { internalType: "address", name: "from", type: "address" },
              { internalType: "address", name: "to", type: "address" },
            ],
            name: "emitCollectNFTTransferEvent",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", "", "", "", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "defaultProfile",
          abi: {
            inputs: [{ internalType: "address", name: "wallet", type: "address" }],
            name: "defaultProfile",
            outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "createProfile",
          abi: {
            inputs: [
              {
                components: [
                  { internalType: "address", name: "to", type: "address" },
                  { internalType: "string", name: "handle", type: "string" },
                  { internalType: "string", name: "imageURI", type: "string" },
                  { internalType: "address", name: "followModule", type: "address" },
                  { internalType: "bytes", name: "followModuleInitData", type: "bytes" },
                  { internalType: "string", name: "followNFTURI", type: "string" },
                ],
                internalType: "struct DataTypes.CreateProfileData",
                name: "vars",
                type: "tuple",
              },
            ],
            name: "createProfile",
            outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "commentWithSig",
          abi: {
            inputs: [
              {
                components: [
                  { internalType: "uint256", name: "profileId", type: "uint256" },
                  { internalType: "string", name: "contentURI", type: "string" },
                  { internalType: "uint256", name: "profileIdPointed", type: "uint256" },
                  { internalType: "uint256", name: "pubIdPointed", type: "uint256" },
                  { internalType: "bytes", name: "referenceModuleData", type: "bytes" },
                  { internalType: "address", name: "collectModule", type: "address" },
                  { internalType: "bytes", name: "collectModuleInitData", type: "bytes" },
                  { internalType: "address", name: "referenceModule", type: "address" },
                  { internalType: "bytes", name: "referenceModuleInitData", type: "bytes" },
                  {
                    components: [
                      { internalType: "uint8", name: "v", type: "uint8" },
                      { internalType: "bytes32", name: "r", type: "bytes32" },
                      { internalType: "bytes32", name: "s", type: "bytes32" },
                      { internalType: "uint256", name: "deadline", type: "uint256" },
                    ],
                    internalType: "struct DataTypes.EIP712Signature",
                    name: "sig",
                    type: "tuple",
                  },
                ],
                internalType: "struct DataTypes.CommentWithSigData",
                name: "vars",
                type: "tuple",
              },
            ],
            name: "commentWithSig",
            outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "comment",
          abi: {
            inputs: [
              {
                components: [
                  { internalType: "uint256", name: "profileId", type: "uint256" },
                  { internalType: "string", name: "contentURI", type: "string" },
                  { internalType: "uint256", name: "profileIdPointed", type: "uint256" },
                  { internalType: "uint256", name: "pubIdPointed", type: "uint256" },
                  { internalType: "bytes", name: "referenceModuleData", type: "bytes" },
                  { internalType: "address", name: "collectModule", type: "address" },
                  { internalType: "bytes", name: "collectModuleInitData", type: "bytes" },
                  { internalType: "address", name: "referenceModule", type: "address" },
                  { internalType: "bytes", name: "referenceModuleInitData", type: "bytes" },
                ],
                internalType: "struct DataTypes.CommentData",
                name: "vars",
                type: "tuple",
              },
            ],
            name: "comment",
            outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "collectWithSig",
          abi: {
            inputs: [
              {
                components: [
                  { internalType: "address", name: "collector", type: "address" },
                  { internalType: "uint256", name: "profileId", type: "uint256" },
                  { internalType: "uint256", name: "pubId", type: "uint256" },
                  { internalType: "bytes", name: "data", type: "bytes" },
                  {
                    components: [
                      { internalType: "uint8", name: "v", type: "uint8" },
                      { internalType: "bytes32", name: "r", type: "bytes32" },
                      { internalType: "bytes32", name: "s", type: "bytes32" },
                      { internalType: "uint256", name: "deadline", type: "uint256" },
                    ],
                    internalType: "struct DataTypes.EIP712Signature",
                    name: "sig",
                    type: "tuple",
                  },
                ],
                internalType: "struct DataTypes.CollectWithSigData",
                name: "vars",
                type: "tuple",
              },
            ],
            name: "collectWithSig",
            outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "collect",
          abi: {
            inputs: [
              { internalType: "uint256", name: "profileId", type: "uint256" },
              { internalType: "uint256", name: "pubId", type: "uint256" },
              { internalType: "bytes", name: "data", type: "bytes" },
            ],
            name: "collect",
            outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", "", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "burnWithSig",
          abi: {
            inputs: [
              { internalType: "uint256", name: "tokenId", type: "uint256" },
              {
                components: [
                  { internalType: "uint8", name: "v", type: "uint8" },
                  { internalType: "bytes32", name: "r", type: "bytes32" },
                  { internalType: "bytes32", name: "s", type: "bytes32" },
                  { internalType: "uint256", name: "deadline", type: "uint256" },
                ],
                internalType: "struct DataTypes.EIP712Signature",
                name: "sig",
                type: "tuple",
              },
            ],
            name: "burnWithSig",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", ""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "burn",
          abi: {
            inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }],
            name: "burn",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "balanceOf",
          abi: {
            inputs: [{ internalType: "address", name: "owner", type: "address" }],
            name: "balanceOf",
            outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
            stateMutability: "view",
            type: "function",
          },
          params: [""],
        },
        {
          lock: true,
          address: "{{LENS_HUB}}",
          name: "approve",
          abi: {
            inputs: [
              { internalType: "address", name: "to", type: "address" },
              { internalType: "uint256", name: "tokenId", type: "uint256" },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          params: ["", ""],
        },
      ],
    },
  ],
  lock: false,
  version: 1,
};
